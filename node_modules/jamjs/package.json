{
  "name": "jamjs",
  "version": "0.2.17",
  "description": "For **front-end** developers who crave maintainable assets, **Jam** is a **package manager** for JavaScript. Unlike other repositories, we put the **browser** first.",
  "maintainers": [
    {
      "name": "Caolan McMahon",
      "url": "https://github.com/caolan"
    }
  ],
  "dependencies": {
    "tar": "~0.1.13",
    "fstream-ignore": "~0.0.5",
    "fstream": "~0.1.18",
    "mkdirp": "~0.3.2",
    "inherits": "~1.0.0",
    "async": "~0.1.21",
    "mime": "~1.2.4",
    "underscore": "~1.3.3",
    "prompt": "0.2.1",
    "rimraf": "~2.0.1",
    "semver": "~1.0.9",
    "ncp": "~0.2.6",
    "minimatch": "~0.2.5",
    "request": "~2.9.202",
    "almond": "0.2.5",
    "requirejs": "2.1.4"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/caolan/jam.git"
  },
  "engines": {
    "node": ">= 0.6.x"
  },
  "bugs": {
    "url": "http://github.com/caolan/jam/issues"
  },
  "bin": {
    "jam": "./bin/jam.js"
  },
  "readme": "# Jam\n\nFor **front-end** developers who crave maintainable assets,\n**Jam** is a **package manager** for JavaScript.\nUnlike other repositories, we put the **browser** first.\n\n\n* **Manage dependencies** - Using a stack of script tags isn't the most maintainable way of managing dependencies, with Jam packages and loaders like RequireJS you get automatic dependency resolution.\n\n* **Fast and modular** - Achieve faster load times with asynchronous loading and the ability to optimize downloads. JavaScript modules and packages provide properly namespaced and more modular code.\n\n* **Use with existing stack** - Jam manages only your front-end assets, the rest of your app can be written in your favourite language or framework. Node.js tools can use the repository directly with the Jam API.\n\n* **Custom builds** - No more configuring custom builds of popular libraries. Now, every build can be optimized automatically depending on the parts you use, and additional components can always be loaded later.\n\n* **Focus on size** - Installing multiple versions works great on the server, but client-side we don't want five versions of jQuery! Jam can use powerful dependency resolution to find a working set of packages using only a single version of each.\n\n* **100% browser** - Every package you see here will work in the browser and play nicely with module loaders like RequireJS. We're not hijacking an existing repository, we're creating a 100% browser-focused community!\n\n\n[Visit the Jam website](http://jamjs.org)\n\n\n## Example usage\n\n    $ jam install jquery\n\n\n```html\n<script src=\"jam/require.js\"></script>\n\n<script>\n    require(['jquery'], function ($) {\n        ...\n    });\n</script>\n```\n\n[Learn more...](http://jamjs.org)\n\n\n## Browser packages in package.json\n\nYou can also define your browser dependencies in a project-level package.json\nfile. If you use Node.js, this format will already familiar to you, and the\nJam dependencies can live alongside your NPM dependencies. It's also possible\nto define custom install paths and baseUrls, as well as hand in any requirejs\nconfiguration here:\n\n```javascript\n{\n    \"name\": \"my-project\",\n    \"version\": \"0.0.1\",\n    \"description\": \"My example project\",\n    \"jam\": {\n        \"baseUrl\": \"public\",\n        \"packageDir\": \"public/vendor\",\n        \"dependencies\": {\n            \"jquery\": \"1.7.x\",\n            \"underscore\": null\n        },\n        \"config\": {\n          \"paths\": {\n            \"templates\": \"public/templates\"\n          }\n        }\n    }\n}\n```\n\n\n## Installation\n\n    # npm install -g jamjs\n\nRequires [node.js](http://nodejs.org)\n\n\n## Settings\n\nYou can customize Jam by creating a `.jamrc` file in your home directory.\n\n### .jamrc\n\n#### repositories\n\nAn array with Jam repositiories. Jam uses `http://jamjs.org/repository` by\ndefault, but it's possible to create a local, e.g. corporate, repository.\n\n```javascript\nexports.repositories = [\n    \"http://mycorporation.com:5984/repository/\",\n    \"http://jamjs.org/repository\"\n];\n```\n\nRepositories are in preference-order, so packages from repositories earlier\nin the list will be preferred over packages in repositories later in the\nlist. However, when no package version is specified, the highest version\nnumber will be installed (even if that's not from the earliest repository).\n\nYou can add custom search URLs to repositories too:\n\n```javascript\nexports.repositories = [\n    {\n        url: \"http://mycorporation.com:5984/repository/\",\n        search: \"http://db.com:5984/_fti/key/_design/search/something\"\n    },\n    \"http://jamjs.org/repository\"\n];\n```\n\nIf your local repository doesn't implement full text search (e.g. you don't want\nto install couchdb lucene), you can disable searching functionality for that repository, otherwise\n`jam search` would report an error:\n\n```javascript\nexports.repositories = [\n    {\n        url: \"http://mycorporation.com:5984/repository/\",\n        search: false\n    },\n    \"http://jamjs.org/repository\"\n];\n```\n\nSee the section below on running your own repository.\n\n\n### package\\_dir\n\nSets the default package installation directory (normally uses `./jam`). This\nis best customized in your project-level package.json file, to ensure other\ndevelopers also install to the correct location.\n\n```javascript\nexports.package_dir = 'libs';\n```\n\n\n## Running the tests\n\nJam includes two test suites, unit tests (in `test/unit`) and integration\ntests (in `test/integration`). The unit tests are easy to run by running the\n`test/unit.sh` script, or `test\\unit.bat` on Windows. The integration tests\nfirst require you to set up a CouchDB instance to test against (you can get\na free account at [IrisCouch](http://www.iriscouch.com/) if you don't want to install\nCouchDB). You then need to set the JAM\\_TEST\\_DB environment variable to\npoint to a CouchDB database URL for testing:\n\n#### Linux\n```\nexport JAM_TEST_DB=http://user:password@localhost:5984/jamtest\n```\n\n#### Windows\n```\nset JAM_TEST_DB=http://user:password@localhost:5984/jamtest\n```\n\n**Warning:** All data in the test database will be deleted!\n\nYou can then run the integration tests using `test/integration.sh` or\n`test\\integration.bat`. To run BOTH the unit and integration tests use\n`test/all.sh` or `test\\all.bat`.\n\n\n## Running your own private repository or mirror\n1.  Install couchdb\n\n#### Mac OS X:\n\n    1. Install [Homebrew](http://mxcl.github.com/homebrew/).\n    2. \n\n```\nbrew install couchdb\n```\n    \n#### Ubuntu:\n\n```\napt-get install couchdb\n```\n2.  Configure your database\n\n```\ncurl -X POST http://127.0.0.1:5984/_replicate -d '{\n    \"source\":\"http://jamjs.org/repository\",\n    \"target\":\"http://localhost:5984/repository\",\n    \"continuous\":true,\n    \"doc_ids\":[\"_design/jam-packages\"]\n    }' -H \"Content-Type: application/json\"\n```\n\n#### To create a mirror:\n\n```\ncurl -X POST http://127.0.0.1:5984/_replicate -d '{\n    \"source\":\"http://jamjs.org/repository\",\n    \"target\":\"repository\",\n    \"continuous\":true,\n    \"create_target\":true\n    }' -H \"Content-Type: application/json\"\n```\n\n#### To create an empty, private repository:\n\n```\ncurl -X PUT http://127.0.0.1:5984/repository\n```\n\n3.  Edit your ```.jamrc``` file to use your new repository:\n\n```\nexports.repositories = [\n    {\n        url: \"http://localhost:5984/repository\",\n        search: false\n    },\n    \"http://jamjs.org/repository\"\n];\n```\n\n### Adding search\n\n1.  [Install couchdb-lucene](https://github.com/rnewson/couchdb-lucene#build-and-run-couchdb-lucene)\n2.  Restart couchdb.\n3.  Edit your ```.jamrc``` file to allow searching on your repository:\n    \n```\nexports.repositories = [\n    {\n        url: \"http://localhost:5984/repository\",\n        search: \"http://localhost:5984/_fti/local/repository/_design/jam-packages/packages/\"\n    },\n    \"http://jamjs.org/repository\"\n];\n```\n\n### Publishing packages to your private repository\n\n```\njam publish --repository http://localhost:5984/repository\n```\n\n## More documentation\n\nTo learn how to create and publish packages etc, and for more info on using\npackages, consult the [Jam documentation website](http://jamjs.org/docs).\n\n\n## Links\n\n* [Homepage](http://jamjs.org)\n* [Packages](http://jamjs.org/packages/)\n* [Docs](http://jamjs.org/doc)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/caolan/jam",
  "_id": "jamjs@0.2.17",
  "dist": {
    "shasum": "e18655e8d91d379b727dc760dcc84995742b6469"
  },
  "_from": "jamjs@~0.2.13",
  "_resolved": "https://registry.npmjs.org/jamjs/-/jamjs-0.2.17.tgz"
}
